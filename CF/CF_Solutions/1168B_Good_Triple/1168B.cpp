#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

// this array was generated using another code that used recursive backtracking, should be simple to replicate

string	s, patterns[80] = 

{"000", "001000", "0010010", "00100110", "00100111", "001010",
"0010110", "0010111", "0011000", "00110010", "001100110", "001100111",
"00110100", "00110101", "00110110", "00110111", "00111", "01000",
"0100100", "01001010", "01001011", "0100110", "0100111", "01010",
"01011000", "01011001", "010110100", "010110101", "01011011",
"010111", "011000", "0110010", "011001100", "011001101", "01100111",
"0110100", "0110101", "0110110", "0110111", "0111", "1000", "1001000",
"1001001", "1001010", "1001011", "10011000", "100110010", "100110011",
"1001101", "100111", "101000", "10100100", "101001010", "101001011",
"10100110", "10100111", "10101", "1011000", "1011001", "10110100",
"10110101", "1011011", "10111", "11000", "11001000", "11001001",
"11001010", "11001011", "110011000", "110011001", "11001101",
"1100111", "1101000", "1101001", "110101", "11011000", "11011001",
"1101101", "110111", "111"};

ll	n, ans, l = -1, r = -1;

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	getline(cin, s); n = s.size();
	for (int i = 0; i < n; i++) {
		for (int j = 3; j <= 9; j++) {
			string sub = s.substr(i, j);
			bool done = 0;
			for (int k = 0; k < 80; k++) {
				if (sub == patterns[k]) {
					done = 1;
					ans += n - (i + j - 1);
				}
			}
			if (done) break;
		}
	}

	cout << ans << '\n';
}
